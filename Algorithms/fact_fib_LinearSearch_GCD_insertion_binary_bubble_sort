{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Factorial Iterative\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "120"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def iterative_fact(n):\n",
    "    fact =1\n",
    "    for i in range(1, n+1):\n",
    "        fact=i*fact\n",
    "    return fact\n",
    "iterative_fact(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Recursive Factorial\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "120"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def fact(n):\n",
    "    if n<=1:\n",
    "        return 1\n",
    "    return  n*fact(n-1)\n",
    "fact(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Bonus Question Tail recursive Factorial"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Fibonacci Iterative\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 1, 2, 3, 5, 8, 13, 21]\n"
     ]
    }
   ],
   "source": [
    "def fib_iter(n):\n",
    "    arr=[]\n",
    "    for i in range(n+1):\n",
    "        if i ==0:\n",
    "            arr.append(0)\n",
    "        elif i ==1:\n",
    "            arr.append(1)\n",
    "        else:\n",
    "            arr.append(arr[i-2]+arr[i-1])\n",
    "    return arr\n",
    "print(fib_iter(8))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Fibonacci Recursion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "21"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def fib(n):\n",
    "    if n==0:\n",
    "        return 0\n",
    "    if n==1:\n",
    "        return 1\n",
    "    return fib(n-1)+fib(n-2)\n",
    "fib(8)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#  Bonus Question Tail Recursion Fibonacci"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Iterative Linear Search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    }
   ],
   "source": [
    "def linear_search_iter(arr,num):\n",
    "    for i in arr:\n",
    "        if i == num:\n",
    "            return num\n",
    "arr=[3,4,5,6,2,1]\n",
    "print(linear_search_iter(arr,2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Recursion linear search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "def linear_search_rec(arr,num):\n",
    "    if len(arr)<1:\n",
    "        print('not found')\n",
    "    else:\n",
    "        if arr[0]==num:\n",
    "            print(num)\n",
    "        else:\n",
    "\n",
    "            linear_search_rec(arr[1:],num)\n",
    "\n",
    "arr=[3,4,5,6,2,1]\n",
    "linear_search_rec(arr,1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# iterative gcd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n"
     ]
    }
   ],
   "source": [
    "def GCD_iter(x,y):\n",
    "    num=min(x,y)\n",
    "    maxi=0\n",
    "    for i in range(1,num+1):\n",
    "        if (x%i==0) and (y%i==0):\n",
    "            maxi=i\n",
    "            \n",
    "    return maxi\n",
    "print(GCD_iter(270,192))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Eucledian_Iterative GCD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12\n"
     ]
    }
   ],
   "source": [
    "def GCD_Iterative(a,b):\n",
    "    if a<b:\n",
    "        a,b=a,b\n",
    "    while(b):\n",
    "        a,b=b,a%b\n",
    "    return a\n",
    "print(GCD_Iterative(24,12))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Eculidean_recursive GCD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n"
     ]
    }
   ],
   "source": [
    "def GCD_euc(x,y):\n",
    "    if x<y:\n",
    "        x,y=y,x\n",
    "    elif y==0:\n",
    "        return x\n",
    "    else:\n",
    "        return GCD_euc(y,x%y)\n",
    "\n",
    "print(GCD_euc(24,18))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Insertion sort"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 5, 6, 7, 11, 12, 13]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def insertion_iter(arr):\n",
    "    \n",
    "    for i in range (1,len(arr)):\n",
    "        j=i\n",
    "        while arr[j]<arr[j-1] and j>0:\n",
    "            arr[j],arr[j-1]=arr[j-1],arr[j]\n",
    "            j-=1\n",
    "\n",
    "            \n",
    "    return arr\n",
    "arr=[12,11,13,7,5,6,1]\n",
    "insertion_iter(arr)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[5, 6, 7, 11, 12, 13]\n"
     ]
    }
   ],
   "source": [
    "def insertion_rec(arr,n):\n",
    "\n",
    "    if n <= 1:\n",
    "        return \n",
    "    else:\n",
    "        n-=1\n",
    "        insertion_rec(arr,n)\n",
    "        i=n-1\n",
    "        j=n-2\n",
    "        \n",
    "        while arr[i]<arr[j] and i>=0:\n",
    "            arr[j],arr[i]=arr[i],arr[j] \n",
    "            i-=1\n",
    "            j-=1\n",
    "            if i<0 or j<0 :\n",
    "                break\n",
    "\n",
    "    return arr\n",
    "arr=[12,11,13,7,5,6]\n",
    "print(insertion_rec(arr,7))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Bubble sort"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 5, 6, 7, 7]\n"
     ]
    }
   ],
   "source": [
    "def bubbleSort(arr):\n",
    "    for i in range(len(arr)):\n",
    "        for j in range(0, len(arr)-i-1):\n",
    "            if arr[j] > arr[j+1] :\n",
    "                arr[j], arr[j+1] = arr[j+1], arr[j]\n",
    " \n",
    "\n",
    "arr = [5,3,2,7,6,1,7]\n",
    " \n",
    "bubbleSort(arr)\n",
    "print(arr)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Bubble sort recursive"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 2, 3, 5, 6, 7]\n"
     ]
    }
   ],
   "source": [
    "def bubblesort_rec(arr,n):\n",
    "    if n<1:\n",
    "        return arr\n",
    "    for i in range(n-1):\n",
    "        if arr[i]>arr[i+1]:\n",
    "            arr[i],arr[i+1]=arr[i+1],arr[i]\n",
    "        \n",
    "        bubblesort_rec(arr,n-1)\n",
    "    return arr\n",
    "arr=[0,5,3,2,7,6,1]\n",
    "print(bubblesort_rec(arr,len(arr)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Binary Search Iterative"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n"
     ]
    }
   ],
   "source": [
    "def BS_iter(arr,num):\n",
    "    start=0\n",
    "    end=len(arr)\n",
    "    while start<end:\n",
    "        mid=(start+end)//2\n",
    "        if arr[mid]>num:\n",
    "             end=mid\n",
    "        elif arr[mid]<num:\n",
    "            start=mid+1\n",
    "        else:\n",
    "            return arr[mid]\n",
    "           \n",
    "arr=[1,2,3,4,5,6,7,8,9]\n",
    "print(BS_iter(arr,6))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Binary Search Recursive"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    }
   ],
   "source": [
    "def BS_rec(arr,l,r,num):\n",
    "   \n",
    "    if r>=l:\n",
    "        m=(l+r)//2\n",
    "        if arr[m]==num:\n",
    "            return arr[m]\n",
    "        elif arr[m]>num:\n",
    "            return BS_rec(arr,l,m-1,num)\n",
    "        else:\n",
    "            return BS_rec(arr,m+1,r,num)\n",
    "arr=[1,2,3,4,5,6]\n",
    "print(BS_rec(arr,0,len(arr)-1,2))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
